// Sadly, you can't use a gradle variable for a plugin version
// ref: https://stackoverflow.com/questions/37555196/in-gradle-how-to-use-a-variable-for-a-plugin-version
plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    // From developers of architectury: "shouldn't hardcode the loom version, just put *-SNAPSHOT"
    // ref: https://maven.architectury.dev/dev/architectury/architectury-loom/
    // Loom 1.6: "Developers should use Loom 1.6 (at the time of writing) to develop mods for Minecraft 1.20.5."
    // ref: https://fabricmc.net/2024/04/19/1205.html
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.fabric_yarn_version}"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        // Minecraft 1.20.5 now requires Java 21 to run.
        // ref: https://fabricmc.net/2024/04/19/1205.html
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}
